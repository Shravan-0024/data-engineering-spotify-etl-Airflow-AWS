{"timestamp":"2025-07-20T13:15:32.874763","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-20T13:15:32.878268","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/spotify-airflow-orchestrate-onlyLambda.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-20T13:15:33.253501Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T13:15:33.253793Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T13:15:33.253953Z","level":"info","event":"Current task name:trigger_extract_lambda","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T13:15:33.254054Z","level":"info","event":"Dag name:lambda_trigger_dag","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T13:15:33.254410","level":"info","event":"Invoking AWS Lambda function: spotify_api_extract with payload: None","logger":"airflow.task.operators.airflow.providers.amazon.aws.operators.lambda_function.LambdaInvokeFunctionOperator"}
{"timestamp":"2025-07-20T13:15:33.302465","level":"info","event":"Connection Retrieved 'aws-airlow-conn'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-20T13:15:33.302629","level":"info","event":"AWS Connection (conn_id='aws-airlow-conn', conn_type='aws') credentials retrieved from login and password.","logger":"airflow.providers.amazon.aws.utils.connection_wrapper.AwsConnectionWrapper"}
{"timestamp":"2025-07-20T13:15:36.482935","level":"info","event":"Lambda response metadata: {'RequestId': '5d8f7609-858d-43e6-8cb7-af5181b72174', 'HTTPStatusCode': 200, 'HTTPHeaders': {'date': 'Sun, 20 Jul 2025 13:15:36 GMT', 'content-type': 'application/json', 'content-length': '4', 'connection': 'keep-alive', 'x-amzn-requestid': '5d8f7609-858d-43e6-8cb7-af5181b72174', 'x-amzn-remapped-content-length': '0', 'x-amz-executed-version': '$LATEST', 'x-amzn-trace-id': 'Root=1-687cebf6-1ec64ca96e2f3be877d6ff20;Parent=74456e02001f1fb0;Sampled=0;Lineage=1:106cd099:0'}, 'RetryAttempts': 0}","logger":"airflow.task.operators.airflow.providers.amazon.aws.operators.lambda_function.LambdaInvokeFunctionOperator"}
{"timestamp":"2025-07-20T13:15:36.484404","level":"info","event":"Lambda function invocation succeeded: {'RequestId': '5d8f7609-858d-43e6-8cb7-af5181b72174', 'HTTPStatusCode': 200, 'HTTPHeaders': {'date': 'Sun, 20 Jul 2025 13:15:36 GMT', 'content-type': 'application/json', 'content-length': '4', 'connection': 'keep-alive', 'x-amzn-requestid': '5d8f7609-858d-43e6-8cb7-af5181b72174', 'x-amzn-remapped-content-length': '0', 'x-amz-executed-version': '$LATEST', 'x-amzn-trace-id': 'Root=1-687cebf6-1ec64ca96e2f3be877d6ff20;Parent=74456e02001f1fb0;Sampled=0;Lineage=1:106cd099:0'}, 'RetryAttempts': 0}","logger":"airflow.task.operators.airflow.providers.amazon.aws.operators.lambda_function.LambdaInvokeFunctionOperator"}
{"timestamp":"2025-07-20T13:15:36.493061","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('019827f9-abb7-7565-8401-30fc7978a135'), task_id='trigger_extract_lambda', dag_id='lambda_trigger_dag', run_id='manual__2025-07-20T13:15:30.580264+00:00', try_number=1, map_index=-1, hostname='088db65685fb', context_carrier={}, task=<Task(LambdaInvokeFunctionOperator): trigger_extract_lambda>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 7, 20, 13, 15, 31, 634922, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/lambda_trigger_dag/runs/manual__2025-07-20T13%3A15%3A30.580264%2B00%3A00/tasks/trigger_extract_lambda?try_number=1')","logger":"task"}
{"timestamp":"2025-07-20T13:15:36.643283Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T13:15:36.643653Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-20T13:15:36.645158Z","level":"info","event":"Task operator:<Task(LambdaInvokeFunctionOperator): trigger_extract_lambda>","chan":"stdout","logger":"task"}
